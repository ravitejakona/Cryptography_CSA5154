import random
import math
from sympy import isprime, mod_inverse

def generate_prime_candidate(length):
    """ Generate an odd integer randomly """
    p = random.getrandbits(length)
    p |= (1 << length - 1) | 1
    return p
def generate_prime_number(length=1024):
    """ Generate a prime number of length bits """
    p = 4
    while not isprime(p):
        p = generate_prime_candidate(length)
    return p
def generate_keypair(bits=1024):
    p = generate_prime_number(bits // 2)
    q = generate_prime_number(bits // 2)
    n = p * q
    phi = (p - 1) * (q - 1)
    e = random.randrange(1, phi)
    g = math.gcd(e, phi)
    while g != 1:
        e = random.randrange(1, phi)
        g = math.gcd(e, phi)
    d = mod_inverse(e, phi)
    return ((e, n), (d, n))
def encrypt(pk, plaintext):
    e, n = pk
    cipher = [pow(ord(char), e, n) for char in plaintext]
    return cipher
def decrypt(pk, ciphertext):
    d, n = pk
    plain = [chr(pow(char, d, n)) for char in ciphertext]
    return ''.join(plain)
# Example usage
public, private = generate_keypair(1024)
message = "Hello saveetha"
encrypted_msg = encrypt(public, message)
decrypted_msg = decrypt(private, encrypted_msg)
print("keshav reddy (192210248)")
print(f"Original Message: {message}")
print(f"Encrypted Message: {encrypted_msg}")
print(f"Decrypted Message: {decrypted_msg}")
