import numpy as np

def mod_inverse(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return -1

def create_key_matrix(key, n):
    key_matrix = []
    for i in range(n):
        row = [ord(key[i * n + j]) % 65 for j in range(n)]
        key_matrix.append(row)
    return np.array(key_matrix)

def text_to_matrix(text, n):
    text_matrix = []
    for i in range(0, len(text), n):
        row = [ord(char) % 65 for char in text[i:i+n]]
        text_matrix.append(row)
    return np.array(text_matrix).T

def matrix_to_text(matrix):
    text = ''
    for row in matrix.T:
        for value in row:
            text += chr(value + 65)
    return text

def encrypt(text, key):
    n = int(len(key)**0.5)
    key_matrix = create_key_matrix(key, n)
    text_matrix = text_to_matrix(text, n)
    encrypted_matrix = np.dot(key_matrix, text_matrix) % 26
    return matrix_to_text(encrypted_matrix)

def decrypt(cipher, key):
    n = int(len(key)**0.5)
    key_matrix = create_key_matrix(key, n)
    determinant = int(np.round(np.linalg.det(key_matrix)))
    determinant_inv = mod_inverse(determinant % 26, 26)
    adjugate_matrix = np.round(determinant * np.linalg.inv(key_matrix)).astype(int) % 26
    inverse_key_matrix = (determinant_inv * adjugate_matrix) % 26
    cipher_matrix = text_to_matrix(cipher, n)
    decrypted_matrix = np.dot(inverse_key_matrix, cipher_matrix) % 26
    return matrix_to_text(decrypted_matrix)
key = "GYBNQKURP"
text = "ACT"

encrypted_text = encrypt(text, key)
decrypted_text = decrypt(encrypted_text, key)
print("keshav reddy (192210248)")
print(f"Original Text: {text}")
print(f"Encrypted Text: {encrypted_text}")
print(f"Decrypted Text: {decrypted_text}")
